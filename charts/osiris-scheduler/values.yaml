global:
  # The type of application that's running
  # * transformation
  # * adapter
  # * something else
  type: transformation
  # The name of the application that should be running (Has to be DNS compliant)
  name: rando
  # Name of the secret needed for the app to run
  secretName: rando
  # The environment the the app will run in
  environment: test

workflowTemplate:
  # the image that the scheduler will atempt to run
  image:
    # The image repo
    repository: image/docker
    # The image tag
    tag: latest
    # The pullPolicy
    # * If not present - If the image is not cached on the device
    # * Always         - Will always try to fetch the newest image
    # * Never          - Will not try to fetch an image - if image is not present on the machine startup fails
    pullPolicy: Always

  # The command needed to run the application code
  command: python -m rando

  # Pod GC strategy must be one of the following:
  # * OnPodCompletion - delete pods immediately when pod is completed (including errors/failures)
  # * OnPodSuccess - delete pods immediately when pod is successful
  # * OnWorkflowCompletion - delete pods when workflow is completed
  # * OnWorkflowSuccess - delete pods when workflow is successful
  podGC: OnPodSuccess

  # Parallelism limits the max total parallel pods that can execute at the same time in a workflow
  parallelism: 1

  # NodeSelector is a selector which will result in all pods of the workflow to be scheduled on the selected node(s).
  nodeSelector:
    agentpool: worker

# determins the state of the jeager sidecar
jaeger:
  enabled: true

# Settings for the cron-workflow
cron:
  # The schedule determins when the workflow will run
  schedule: "0 * * * *"
  # Concurrency policy determines what to do if multiple Workflows are scheduled at the same time.
  # Available options:
  # * Allow: allow all
  # * Replace: remove all old before scheduling a new
  # * Forbid: do not allow any new while there are old
  concurrencyPolicy: "Forbid"

# This will be appended on the `charts/osiris-scheduler/files/config.ini`
# The config.ini file exists for me to template default values pr environment.
config: |
  [Datasets]
  source = a1248010-e46e-4491-11de-08d8fda51d00
  destination = 1bf31823-4e55-4956-88cc-08d9834acce7
  model = harmonie
  batch_size = 5

# Config take the content a builds files from the and adds them in the pod under /etc/osiris/
configFiles:
  log.conf: |
    [loggers]
    keys=root
    [handlers]
    keys=consoleHandler,fileHandler
    [formatters]
    keys=fileFormatter,consoleFormatter
    [logger_root]
    level=WARNING
    handlers=consoleHandler
    [handler_consoleHandler]
    class=StreamHandler
    formatter=consoleFormatter
    args=(sys.stdout,)
    [handler_fileHandler]
    class=FileHandler
    formatter=fileFormatter
    args=('logfile.log',)
    [formatter_fileFormatter]
    format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
    [formatter_consoleFormatter]
    format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
